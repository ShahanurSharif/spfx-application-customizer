import { Log } from '@microsoft/sp-core-library';
import {
  BaseApplicationCustomizer
} from '@microsoft/sp-application-base';

import * as strings from 'Monarch360NavCrudApplicationCustomizerStrings';
import { SettingsDialog } from './components/SettingsDialog';

const LOG_SOURCE: string = 'Monarch360NavCrudApplicationCustomizer';

/**
 * If your command set uses the ClientSideComponentProperties JSON input,
 * it will be deserialized into the BaseExtension.properties object.
 * You can define an interface to describe it.
 */
export interface IMonarch360NavCrudApplicationCustomizerProperties {
  // This is an example; replace with your own property
  testMessage: string;
}

/** A Custom Action which can be run during execution of a Client Side Application */
export default class Monarch360NavCrudApplicationCustomizer
  extends BaseApplicationCustomizer<IMonarch360NavCrudApplicationCustomizerProperties> {

  private buttonInjectionInterval: number | null = null;
  private domObserver: MutationObserver | null = null;

  public onInit(): Promise<void> {
    Log.info(LOG_SOURCE, `Initialized ${strings.Title}`);

    // Wait for DOM to be ready and inject settings icon
    document.addEventListener('DOMContentLoaded', this.injectSettingsButton);
    
    // Try to inject with multiple attempts and increasing delays
    // First attempt - immediately
    this.injectSettingsButton();
    
    // Second attempt - short delay
    setTimeout(() => {
      const button = document.getElementById('monarch360SettingsBtn');
      if (!button) {
        console.log('Button not found after initial attempt, trying again...');
        this.injectSettingsButton();
      }
    }, 1000);
    
    // Third attempt - longer delay
    setTimeout(() => {
      const button = document.getElementById('monarch360SettingsBtn');
      if (!button) {
        console.log('Button still not found, making one more attempt...');
        this.injectSettingsButton();
      }
    }, 3000);
    
    // Set up a periodic check to ensure our button stays injected
    this.buttonInjectionInterval = window.setInterval(() => {
      const button = document.getElementById('monarch360SettingsBtn');
      if (!button) {
        console.log('Periodic check: Button not found, re-injecting...');
        this.injectSettingsButton();
      }
    }, 5000);

    // Listen for navigation events to handle SPA navigation
    window.addEventListener('hashchange', this.injectSettingsButton);
    
    // Set up mutation observer to watch for DOM changes
    try {
      this.domObserver = new MutationObserver((mutations) => {
        // Check if our button still exists
        const button = document.getElementById('monarch360SettingsBtn');
        if (!button) {
          console.log('Button lost due to DOM changes, re-injecting...');
          this.injectSettingsButton();
        }
      });
      
      // Start observing the document with the configured parameters
      this.domObserver.observe(document.body, { 
        childList: true, 
        subtree: true 
      });
      console.log('DOM observer started');
    } catch (error) {
      console.error('Error setting up DOM observer:', error);
    }
    
    return Promise.resolve();
  }
  
  /**
   * Clean up event listeners on dispose
   */
  protected onDispose(): void {
    window.removeEventListener('hashchange', this.injectSettingsButton);
    document.removeEventListener('DOMContentLoaded', this.injectSettingsButton);
    
    // Clear the interval
    if (this.buttonInjectionInterval) {
      window.clearInterval(this.buttonInjectionInterval);
      this.buttonInjectionInterval = null;
    }
    
    // Disconnect mutation observer
    if (this.domObserver) {
      this.domObserver.disconnect();
      this.domObserver = null;
    }
    
    // Remove any existing button
    const existingButton = document.getElementById('monarch360SettingsBtn');
    if (existingButton) {
      existingButton.remove();
    }
    
    super.onDispose();
  }
  
  /**
   * Debug function to visually highlight SharePoint header elements
   */
  private debugHighlightElements(): void {
    // Try most common SharePoint header elements to make them easier to identify
    const selectors = [
      '.ms-CommandBar',
      'div[class*="primaryHeader"]',
      '.ms-compositeHeader-headerMain',
      '#O365_HeaderLeftRegion',
      'div[class*="headerContainer"]',
      'div[role="banner"]',
      '.SPPageChrome',
      'header[role="banner"]',
      '.SPPageHeader',
      '.o365cs-base'
    ];
    
    selectors.forEach(selector => {
      const elements = document.querySelectorAll(selector);
      if (elements.length > 0) {
        console.log(`Found ${elements.length} elements for selector: ${selector}`);
        elements.forEach(el => {
          console.log('Element:', el);
          // Highlight for debugging
          (el as HTMLElement).style.border = '2px solid red';
        });
      }
    });
  }
  
  /**
   * Injects the settings button into the DOM
   */
  private injectSettingsButton = (): void => {
    // Ensure previous button is removed if it exists
    const existingButton = document.getElementById('monarch360SettingsBtn');
    if (existingButton) {
      existingButton.remove();
    }

    try {
      console.log('Trying to inject settings button...');
      
      // Find the logo cell to inject our button BEFORE it (to the left of the logo)
      const logoCell = document.querySelector('.logoCell-110');
      
      if (!logoCell) {
        console.log('Could not find logo cell. Will retry later.');
        return;
      }
      
      console.log('Found logo cell for injection:', logoCell);
      
      // Log the injection point for debugging
      console.log('Found injection point:', injectionPoint);
      
      // Create settings icon button with improved styling and better visibility
      const settingsBtn = document.createElement('div');
      settingsBtn.id = 'monarch360SettingsBtn';
      settingsBtn.title = 'Site Settings';
      settingsBtn.setAttribute('aria-label', 'Open site settings');
      
      // Apply styles - making button fixed position for visibility
      settingsBtn.style.background = '#0078d4'; // Microsoft blue
      settingsBtn.style.color = 'white';
      settingsBtn.style.cursor = 'pointer';
      settingsBtn.style.padding = '8px';
      settingsBtn.style.margin = '0';
      settingsBtn.style.display = 'flex';
      settingsBtn.style.alignItems = 'center';
      settingsBtn.style.justifyContent = 'center';
      settingsBtn.style.borderRadius = '4px';
      settingsBtn.style.height = '32px';
      settingsBtn.style.width = '32px';
      
      // Use fixed position if injecting into body
      if (injectionPoint === document.body) {
        settingsBtn.style.position = 'fixed';
        settingsBtn.style.top = '10px';
        settingsBtn.style.left = '10px';
      } else {
        settingsBtn.style.position = 'relative';
        settingsBtn.style.margin = '0 10px';
      }
      
      settingsBtn.style.zIndex = '9999'; // Very high z-index to ensure visibility
      settingsBtn.style.boxShadow = '0 2px 4px rgba(0,0,0,0.2)';
      settingsBtn.style.transition = 'all 0.2s ease';
        
      // Use Fluent UI gear icon
      settingsBtn.innerHTML = `<svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.29 2.045-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" />
      </svg>`;
        
      // Add hover styles
      const style = document.createElement('style');
      style.innerHTML = `
        #monarch360SettingsBtn:hover {
          transform: scale(1.05);
          background-color: #106ebe !important;
        }
        #monarch360SettingsBtn:active {
          transform: scale(0.98);
        }
        #monarch360SettingsBtn svg {
          transition: transform 0.3s ease;
        }
        #monarch360SettingsBtn:hover svg {
          transform: rotate(30deg);
        }
      `;
      document.head.appendChild(style);
        
      // Add click handler to show the settings dialog
      settingsBtn.onclick = () => {
        console.log('Settings button clicked');
        SettingsDialog.show();
      };
        
      // Insert button at appropriate position based on injection point
      if (injectionPoint === document.body) {
        // For body injection, just append to body
        document.body.appendChild(settingsBtn);
        console.log('Added button to body with fixed positioning');
      } else if (injectionPoint.firstChild) {
        // Insert as first child of injection point
        injectionPoint.insertBefore(settingsBtn, injectionPoint.firstChild);
        console.log('Added button as first child of injection point');
      } else {
        // Append to injection point
        injectionPoint.appendChild(settingsBtn);
        console.log('Added button to injection point');
      }
      
      // Log the button state for debugging
      console.log('Button added to DOM:', settingsBtn);
        
      // Apply any saved settings on page load
      this.applyStoredSettings();
      console.log('Settings button injected successfully!');
    } catch (error) {
      console.error('Error injecting settings button:', error);
      Log.error(LOG_SOURCE, error as Error);
    }
  }
  
  /**
   * Apply stored settings on page load
   */
  private applyStoredSettings = (): void => {
    try {
      const savedSettings = localStorage.getItem('monarch360Settings');
      
      if (savedSettings) {
        const settings = JSON.parse(savedSettings);
        
        if (settings.backgroundColor && settings.fontSize) {
          this.applySavedStyles(settings.backgroundColor, settings.fontSize);
        }
      }
    } catch (error) {
      console.error('Error applying stored settings:', error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      Log.error(LOG_SOURCE, new Error(errorMessage));
    }
  }
  
  /**
   * Apply the saved styles to the page
   */
  private applySavedStyles = (color: string, fontSize: number): void => {
    // Calculate text color based on background brightness
    const getTextColor = (bgColor: string): string => {
      const r = parseInt(bgColor.substr(1, 2), 16);
      const g = parseInt(bgColor.substr(3, 2), 16);
      const b = parseInt(bgColor.substr(5, 2), 16);
      const brightness = (r * 299 + g * 587 + b * 114) / 1000;
      return brightness > 128 ? 'black' : 'white';
    };
    
    // Create a style element to inject our custom CSS
    const styleId = 'monarch360CustomStyles';
    let styleEl = document.getElementById(styleId) as HTMLStyleElement;
    
    // Create the style element if it doesn't exist
    if (!styleEl) {
      styleEl = document.createElement('style');
      styleEl.id = styleId;
      document.head.appendChild(styleEl);
    }
    
    // Apply styles to various SharePoint header elements
    const cssRules = `
      /* Site Header Background Color */
      .ms-CommandBar,
      div[class*="primaryHeader"],
      .ms-compositeHeader-headerMain,
      #O365_HeaderLeftRegion,
      div[class*="headerContainer"],
      div[role="banner"],
      header[role="banner"],
      .SPPageHeader,
      .o365cs-base {
        background-color: ${color} !important;
      }
      
      /* Adjust all navigation links and icons in the header */
      .ms-CommandBar a,
      .ms-CommandBar button,
      .ms-CommandBar span,
      .ms-CommandBar div,
      [data-navigationcomponent="SiteHeader"],
      [data-automationid="SiteHeader"] *,
      .ms-HorizontalNav *,
      div[class*="primaryHeader"] *,
      #O365_NavHeader * {
        font-size: ${fontSize}px !important;
      }
      
      /* Ensure content in the header is visible against the background color */
      .ms-CommandBar a,
      .ms-CommandBar button,
      .ms-CommandBar span,
      .ms-CommandBar div,
      [data-navigationcomponent="SiteHeader"] a,
      [data-automationid="SiteHeader"] button,
      div[class*="primaryHeader"] a,
      div[class*="primaryHeader"] button,
      div[class*="primaryHeader"] span,
      #O365_NavHeader a,
      #O365_NavHeader button,
      div[role="banner"] a,
      div[role="banner"] button {
        color: ${getTextColor(color)} !important;
      }
      
      /* Make settings button always visible */
      #monarch360SettingsBtn {
        display: flex !important;
        visibility: visible !important;
        opacity: 1 !important;
      }
    `;
    
    // Update the style element content
    styleEl.textContent = cssRules;
    console.log(`Applied custom styles - Color: ${color}, Font Size: ${fontSize}px`);
  }
}
